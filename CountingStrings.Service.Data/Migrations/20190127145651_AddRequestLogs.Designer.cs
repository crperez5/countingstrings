// <auto-generated />
using System;
using CountingStrings.Service.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CountingStrings.Service.Data.Migrations
{
    [DbContext(typeof(CountingStringsContext))]
    [Migration("20190127145651_AddRequestLogs")]
    partial class AddRequestLogs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CountingStrings.Service.Data.Models.RequestCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("Count")
                        .IsConcurrencyToken();

                    b.HasKey("Id");

                    b.ToTable("RequestCount");
                });

            modelBuilder.Entity("CountingStrings.Service.Data.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("Status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CountingStrings.Service.Data.Models.SessionCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("NumClose")
                        .IsConcurrencyToken();

                    b.Property<int>("NumOpen")
                        .IsConcurrencyToken();

                    b.HasKey("Id");

                    b.ToTable("SessionCounts");
                });

            modelBuilder.Entity("CountingStrings.Service.Data.Models.SessionWord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("SessionId");

                    b.Property<string>("Word");

                    b.HasKey("Id");

                    b.ToTable("SessionWords");
                });

            modelBuilder.Entity("CountingStrings.Service.Data.Models.SessionWordCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("Count");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("SessionId");

                    b.Property<string>("Word");

                    b.HasKey("Id");

                    b.ToTable("SessionWordCounts");
                });

            modelBuilder.Entity("CountingStrings.Service.Data.Models.WordDateCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("Count");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Word");

                    b.HasKey("Id");

                    b.ToTable("WordDateCounts");
                });

            modelBuilder.Entity("CountingStrings.Service.Data.Models.WorkerJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("ProcessId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("WorkerJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
